generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt    @id @default(autoincrement())
  key             String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kind            Int // 0: 管理者, 1: トレーナー, 2: クライアント
  first_name      String
  last_name       String
  first_name_kana String
  last_name_kana  String
  birth_date      DateTime  @db.Date
  gender          Int // 0: 女性, 1: 男性, 2: その他
  active_flag     Boolean   @default(true)
  deleted_at      DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relations
  credentials       UserCredentials?
  client            Client?
  trainer           Trainer?
  learningMaterials LearningMaterial[]

  @@map("users")
}

model UserCredentials {
  id              BigInt   @id @default(autoincrement())
  user_id         String   @unique @db.Uuid
  email           String   @unique
  password_digest String
  reset_at        Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [key])

  @@map("user_credentials")
}

model Client {
  id      BigInt @id @default(autoincrement())
  user_id BigInt @unique

  // Relations
  user                  User                   @relation(fields: [user_id], references: [id])
  profile               ClientProfile?
  ptSessions            PtSession[]
  bodyConditions        BodyCondition[]
  midtermHealthPurposes MidtermHealthPurpose[]

  @@map("clients")
}

model ClientProfile {
  id               BigInt @id @default(autoincrement())
  client_id        BigInt @unique
  occupation       String
  hobby            String
  allow_sns_post   String
  exercise_history String

  // Relations
  client Client @relation(fields: [client_id], references: [id])

  @@map("client_profiles")
}

model Trainer {
  id      BigInt @id @default(autoincrement())
  user_id BigInt @unique

  // Relations
  user       User            @relation(fields: [user_id], references: [id])
  profile    TrainerProfile?
  ptSessions PtSession[]

  @@map("trainers")
}

model TrainerProfile {
  id                   BigInt @id @default(autoincrement())
  trainer_id           BigInt @unique
  motivation_statement String
  signature_muscle     String
  specialization       String
  certifications       String

  // Relations
  trainer Trainer @relation(fields: [trainer_id], references: [id])

  @@map("trainer_profiles")
}

model PtSession {
  id              BigInt   @id @default(autoincrement())
  client_id       BigInt
  trainer_id      BigInt
  key             String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  performed_at    DateTime
  kind            String
  theme           String
  archive_url     String?
  trainer_comment String?
  memo            String?
  chat_contents   String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  client      Client          @relation(fields: [client_id], references: [id])
  trainer     Trainer         @relation(fields: [trainer_id], references: [id])
  items       PtSessionItem[]
  assignments Assignment[]

  @@map("pt_sessions")
}

model PtSessionItem {
  id             BigInt   @id @default(autoincrement())
  pt_session_id  BigInt
  task_id        BigInt
  task_type      String
  trainer_advice String?
  memo           String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  ptSession PtSession @relation(fields: [pt_session_id], references: [id])

  @@map("pt_session_items")
}

model BodyCondition {
  id                   BigInt   @id @default(autoincrement())
  client_id            BigInt
  measured_at          DateTime @db.Date
  weight               Float?
  body_fat             Float?
  muscle_mass          Float?
  skeletal_muscle_rate Float?
  bmi                  Float?
  bmr                  Float?
  avg_sleep_time       Float?
  avg_respiration_rate Float?
  sympathetic          Float?
  parasympathetic      Float?
  bust                 Float?
  underbust            Float?
  waist                Float?
  hip                  Float?
  arm_circumference    Float?
  buttock_height       Float?
  thigh_circumference  Float?
  calf_circumference   Float?
  ffd                  Float?
  hwd                  Float?
  memo                 String?

  // Relations
  client Client @relation(fields: [client_id], references: [id])

  @@map("body_conditions")
}

model MidtermHealthPurpose {
  id           BigInt   @id @default(autoincrement())
  key          String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id    BigInt
  purpose      String
  months       Int
  setting_date DateTime
  start_date   DateTime
  memo         String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  client Client @relation(fields: [client_id], references: [id])

  @@map("midterm_health_purposes")
}

model Assignment {
  id            BigInt   @id @default(autoincrement())
  key           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pt_session_id BigInt
  due_date      DateTime @db.Date
  task_type     String
  task_id       BigInt
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  ptSession PtSession @relation(fields: [pt_session_id], references: [id])

  @@map("assignments")
}

model LearningMaterial {
  id           BigInt   @id @default(autoincrement())
  owner_id     String   @db.Uuid
  key          String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  status       String
  source_url   String
  content_type String
  content_id   BigInt
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  owner          User            @relation(fields: [owner_id], references: [key])
  treatmentMenus TreatmentMenu[]
  trainingMenus  TrainingMenu[]

  @@map("learning_materials")
}

model CurriculumUnit {
  id                      BigInt   @id @default(autoincrement())
  name                    String
  type                    String
  overview                String
  overview_url            String
  evaluation_criteria     String
  evaluation_criteria_url String
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  // Relations
  requiredFunctions RequiredFunction[]

  @@map("curriculum_units")
}

model RequiredFunction {
  id                      BigInt   @id @default(autoincrement())
  curriculum_unit_id      BigInt
  name                    String
  overview                String
  overview_url            String
  evaluation_criteria     String
  evaluation_criteria_url String
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  // Relations
  curriculumUnit CurriculumUnit  @relation(fields: [curriculum_unit_id], references: [id])
  treatmentMenus TreatmentMenu[]
  TrainingMenu   TrainingMenu[]

  @@map("required_functions")
}

model TreatmentMenu {
  id                   BigInt   @id @default(autoincrement())
  name                 String
  required_function_id BigInt
  learning_material_id BigInt
  tips                 String
  common_errors        String[]
  target_muscles       String[]
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // Relations
  requiredFunction RequiredFunction @relation(fields: [required_function_id], references: [id])
  learningMaterial LearningMaterial @relation(fields: [learning_material_id], references: [id])

  @@map("treatment_menus")
}

model TrainingMenu {
  id                   BigInt   @id @default(autoincrement())
  name                 String
  required_function_id BigInt
  learning_material_id BigInt
  tips                 String
  common_errors        String[]
  target_muscles       String[]
  level                Int
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // Relations
  requiredFunction RequiredFunction @relation(fields: [required_function_id], references: [id])
  learningMaterial LearningMaterial @relation(fields: [learning_material_id], references: [id])

  @@map("training_menus")
}
