name: Verify Prisma Migrations (PR)

on:
  pull_request:
    branches: [ main ]

jobs:
  verify-migrations:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: snapshotdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # リストア先（一時Postgres）の接続文字列
      SNAPSHOT_DB_URL: postgresql://postgres:postgres@localhost:5432/snapshotdb
      # ダンプ元（Supabase dev 推奨）
      REMOTE_DB_URL: postgresql://postgres:${{ secrets.SUPABASE_DEVELOPMENT_DB_PASSWORD }}@db.vnmlqmebcmhtjsclwkod.supabase.co:5432/postgres

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      # --- 1) Supabase（dev）の現在スキーマをスナップショット ---
      - name: Dump remote schema (schema only)
        run: |
          pg_dump "$REMOTE_DB_URL" --schema-only --no-owner --no-privileges > schema.sql
        env:
          PGHOSTADDR: 54.85.113.108
      - name: Dump _prisma_migrations table data
        run: |
          pg_dump "$REMOTE_DB_URL" --data-only --inserts --table _prisma_migrations --no-owner --no-privileges > migrations_data.sql
        env:
          PGHOSTADDR: 54.85.113.108

      # --- 2) CI内の一時Postgresへ復元 ---
      - name: Restore schema to snapshot DB
        run: psql "$SNAPSHOT_DB_URL" -f schema.sql
      - name: Restore _prisma_migrations data
        run: psql "$SNAPSHOT_DB_URL" -f migrations_data.sql

      # --- 3) featureに含まれる新規マイグレーションを適用できるか検証 ---
      - name: Apply migrations to snapshot (deploy)
        env:
          DATABASE_URL: ${{ env.SNAPSHOT_DB_URL }}
        run: npx prisma migrate deploy

      # --- 4) 参考: 何が変わるかSQL差分を出してアーティファクト化 ---
      - name: Generate SQL diff from snapshot -> target datamodel
        env:
          # from-url にはスナップショットDB、to は現在のschema.prisma
          FROM_URL: ${{ env.SNAPSHOT_DB_URL }}
        run: |
          npx prisma migrate diff \
            --from-url "$FROM_URL" \
            --to-schema-datamodel ./prisma/schema.prisma \
            --script > migration_diff.sql || true
          # diffが空でもファイルは出力（レビューの利便性のため）

      - name: Upload diff artifact
        uses: actions/upload-artifact@v4
        with:
          name: migration-sql-diff
          path: migration_diff.sql
